const { 
    ActionRowBuilder, 
    StringSelectMenuBuilder, 
    EmbedBuilder, 
    ModalBuilder, 
    TextInputBuilder, 
    TextInputStyle, 
    ButtonBuilder, 
    ButtonStyle 
} = require('discord.js');
const fs = require('fs');
const path = require('path');

// Fonction pour charger les donn√©es de la guilde
const loadGuildData = (guildPath) => {
    try {
        if (fs.existsSync(guildPath)) {
            return JSON.parse(fs.readFileSync(guildPath, 'utf8'));
        }
    } catch (error) {
        console.error(`Erreur lors du chargement des donn√©es : ${error.message}`);
    }
    return {};
};

// Fonction pour sauvegarder les donn√©es de la guilde
const saveGuildData = (guildPath, newData) => {
    try {
        const currentData = loadGuildData(guildPath);
        const mergedData = { ...currentData, ...newData };
        fs.writeFileSync(guildPath, JSON.stringify(mergedData, null, 2));
    } catch (error) {
        console.error(`Erreur lors de la sauvegarde des donn√©es : ${error.message}`);
    }
};

module.exports = {
    data: {
        name: 'config-r√®glement',
        description: 'Configurer le r√®glement sur le serveur.',
    },
    async execute(interaction) {
        const client = this.client;
        const guildId = interaction.guild.id;
        const guildPath = path.resolve(`./guilds-data/${guildId}.json`);
        const guildData = loadGuildData(guildPath);

        // V√©rification des donn√©es existantes
        const rulesChannel = guildData.rules_channel || null;
        const reactRole = guildData.rules?.reactRole || null;
        const rulesExist = guildData.rules && guildData.rules.title;

        // Cr√©ation de l'embed de configuration
        const embedConfigurationRules = new EmbedBuilder()
            .setTitle("‚öôÔ∏è Configuration du R√®glement")
            .setColor(rulesChannel ? "#f40076" : "#FF0000")
            .setDescription(
                `**Configurez le r√®glement de votre serveur !**\n\n` +
                `*Modifier le r√®glement pour l'adapter √† votre serveur. üìù*\n` +
                `*Bouton r√®glement facultatif qui permet de donner un r√¥le d√©fini √† l'utilisateur.*\n\n` +
                `\`\`Etape 1: ${rulesExist ? "Modifier votre r√®glement" : "Cr√©er votre r√®glement"}\`\`\n` +
                `\`\`Etape 2: Ajouter votre bouton de validation (Facultatif)\`\``
            )  
            .addFields(
                { 
                    name: "üìã R√¥le de R√©action", 
                    value: reactRole ? `üü¢ <@&${reactRole}>` : "üî¥ D√©sactiv√©/Non configur√©", 
                    inline: true 
                },
                { 
                    name: "üìå Statut du salon r√®glement", 
                    value: rulesChannel ? "üü¢ Salon R√®glement trouv√© !" : "üî¥ Salon R√®glement non trouv√© !", 
                    inline: true 
                }
            )
            .setFooter({ text: "Modifiez la configuration via le menu ci-dessous." })
            .setTimestamp();

        // Ajout d'un champ d'erreur si pas de salon configur√©
        if (!rulesChannel) {
            embedConfigurationRules.addFields({
                name: "‚ö†Ô∏è Erreur",
                value: "Veuillez configurer un salon pour le r√®glement avant de continuer. -> ``/config``"
            });
        }

        // Cr√©ation du menu de s√©lection
        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('rules-menu')
            .setPlaceholder('Choisissez une action')
            .addOptions([
                {
                    label: rulesExist ? "Modifier le r√®glement" : "Etape 1: Cr√©er le r√®glement",
                    value: "edit-rules",
                    description: "Configurer le contenu du r√®glement",
                    emoji: "‚úçÔ∏è"
                },
                rulesExist ? {
                    label: "Supprimer le r√®glement",
                    value: "suppr-rules",
                    description: "Supprimer le r√®glement",
                    emoji: "üóëÔ∏è"
                } : null,
                rulesExist ? null : {
                    label: "R√®glement par d√©faut",
                    value: "default-rules",
                    description: "G√©n√©rer un r√®glement par d√©faut",
                    emoji: "üíæ"
                },
                {
                    label: "Etape 2: Activer/D√©sactiver le r√¥le de validation",
                    value: "toggle-react-role",
                    description: "G√©rer le r√¥le de validation du r√®glement",
                    emoji: "‚úÖ"
                },
                {
                    label: "Mettre fin √† la configuration",
                    value: "end-config",
                    description: "Mettre fin √† la configuration du r√®glement",
                    emoji: "0Ô∏è‚É£"
                },
            ].filter(option => option !== null));

        const actionRow = new ActionRowBuilder().addComponents(selectMenu);

        // Envoi du message initial
        await interaction.reply({
            embeds: [embedConfigurationRules],
            components: rulesChannel ? [actionRow] : []
        });

        // Gestionnaire pour le modal des r√®gles
        const handleRulesModal = async (modalInteraction) => {
            if (!modalInteraction.isModalSubmit()) return;
            if (modalInteraction.customId !== 'edit-rules-modal') return;

            const title = modalInteraction.fields.getTextInputValue('rules-title');
            const description = modalInteraction.fields.getTextInputValue('rules-description');
            const modalGuildId = modalInteraction.guild.id;
            const modalGuildPath = path.resolve(`./guilds-data/${modalGuildId}.json`);
            
            const modalGuildData = loadGuildData(modalGuildPath);
            if (!modalGuildData.rules) modalGuildData.rules = {};
            
            modalGuildData.rules.title = title;
            modalGuildData.rules.description = description;
            
            saveGuildData(modalGuildPath, modalGuildData);

            // Mise √† jour du salon des r√®gles
            const rulesChannel = modalInteraction.guild.channels.cache.get(modalGuildData.rules_channel);
            if (rulesChannel) {
                // Suppression des anciens messages
                const messages = await rulesChannel.messages.fetch({ limit: 100 });
                for (const message of messages.values()) {
                    if (message.embeds.length > 0 || message.components.length > 0) {
                        await message.delete().catch(console.error);
                    }
                }

                // Envoi du nouvel embed
                const embed = new EmbedBuilder()
                    .setTitle(title)
                    .setDescription(description)
                    .setColor(modalGuildData.botColor || '#f40076');

                await rulesChannel.send({ embeds: [embed] });
            }

            await modalInteraction.reply({
                content: "**‚úÖ Les r√®gles ont √©t√© mises √† jour avec succ√®s !**",
                ephemeral: true
            });
        };

        // Ajout du gestionnaire d'√©v√©nements pour le modal
        client.on('interactionCreate', handleRulesModal);

        // Gestionnaire des interactions du menu
        const collector = interaction.channel.createMessageComponentCollector({ 
            filter: i => i.user.id === interaction.user.id,
            time: 1800000 
        });

        collector.on('collect', async (menuInteraction) => {
            if (menuInteraction.customId !== 'rules-menu') return;
            
            const value = menuInteraction.values[0];
            
            switch (value) {
                case "edit-rules":
                    const modal = new ModalBuilder()
                        .setCustomId('edit-rules-modal')
                        .setTitle("Configurer les r√®gles");

                    const titleInput = new TextInputBuilder()
                        .setCustomId('rules-title')
                        .setLabel("Titre des r√®gles")
                        .setStyle(TextInputStyle.Short)
                        .setValue(guildData.rules?.title || "");

                    const descriptionInput = new TextInputBuilder()
                        .setCustomId('rules-description')
                        .setLabel("Description des r√®gles")
                        .setStyle(TextInputStyle.Paragraph)
                        .setValue(guildData.rules?.description || "");

                    modal.addComponents(
                        new ActionRowBuilder().addComponents(titleInput),
                        new ActionRowBuilder().addComponents(descriptionInput)
                    );

                    await menuInteraction.showModal(modal);
                    break;

                case "toggle-react-role":
                    const currentGuildData = loadGuildData(guildPath);
                    
                    if (!currentGuildData.rules_channel) {
                        await menuInteraction.reply({
                            content: "‚ö†Ô∏è Aucun salon de r√®glement n'est configur√©. Veuillez en configurer un avant de continuer.",
                            ephemeral: true
                        });
                        return;
                    }

                    const currentRulesChannel = interaction.guild.channels.cache.get(currentGuildData.rules_channel);
                    if (!currentRulesChannel) {
                        await menuInteraction.reply({
                            content: "‚ö†Ô∏è Le salon configur√© pour le r√®glement est introuvable. Veuillez v√©rifier la configuration.",
                            ephemeral: true
                        });
                        return;
                    }

                    if (currentGuildData.rules?.reactRole) {
                        // D√©sactivation du r√¥le de r√©action
                        delete currentGuildData.rules.reactRole;
                        saveGuildData(guildPath, currentGuildData);

                        // Suppression du bouton
                        const messages = await currentRulesChannel.messages.fetch({ limit: 100 });
                        const buttonMessage = messages.find(msg => msg.components.length > 0);
                        if (buttonMessage) await buttonMessage.delete().catch(() => {});

                        await menuInteraction.reply({
                            content: "‚úÖ Le r√¥le de validation a √©t√© d√©sactiv√© et le bouton a √©t√© supprim√©.",
                            ephemeral: true
                        });
                    } else {
                        // Activation du r√¥le de r√©action
                        const roles = Array.from(
                            interaction.guild.roles.cache
                                .filter(role => role.name !== "@everyone")
                                .values()
                        );

                        const rolesPerPage = 15;
                        const roleOptions = roles.slice(0, rolesPerPage).map(role => ({
                            label: role.name,
                            value: role.id
                        }));

                        const roleSelectMenu = new StringSelectMenuBuilder()
                            .setCustomId('select-react-role')
                            .setPlaceholder('Choisissez un r√¥le...')
                            .addOptions(roleOptions);

                        const navigationButtons = new ActionRowBuilder().addComponents(
                            new ButtonBuilder()
                                .setCustomId('previous-page')
                                .setLabel('Pr√©c√©dent')
                                .setStyle(ButtonStyle.Primary)
                                .setDisabled(true),
                            new ButtonBuilder()
                                .setCustomId('next-page')
                                .setLabel('Suivant')
                                .setStyle(ButtonStyle.Primary)
                                .setDisabled(roles.length <= rolesPerPage)
                        );

                        await menuInteraction.reply({
                            content: "Veuillez s√©lectionner le r√¥le √† utiliser pour la validation du r√®glement.",
                            components: [
                                new ActionRowBuilder().addComponents(roleSelectMenu),
                                navigationButtons
                            ],
                            ephemeral: true
                        });

                        // Gestionnaire pour la s√©lection du r√¥le
                        const roleCollector = menuInteraction.channel.createMessageComponentCollector({
                            filter: i => i.user.id === interaction.user.id,
                            time: 60000
                        });

                        let currentPage = 0;

                        roleCollector.on('collect', async (i) => {
                            if (i.customId === 'select-react-role') {
                                const selectedRoleId = i.values[0];
                                currentGuildData.rules = currentGuildData.rules || {};
                                currentGuildData.rules.reactRole = selectedRoleId;
                                saveGuildData(guildPath, currentGuildData);

                                // Ajout du bouton de validation
                                const button = new ButtonBuilder()
                                    .setCustomId('accept-rules')
                                    .setLabel('Valider le r√®glement')
                                    .setStyle(ButtonStyle.Success);

                                await currentRulesChannel.send({
                                    components: [new ActionRowBuilder().addComponents(button)]
                                });

                                await i.update({
                                    content: `‚úÖ Le r√¥le <@&${selectedRoleId}> a √©t√© configur√© pour la validation.`,
                                    components: []
                                });

                                roleCollector.stop();
                            } else if (i.customId === 'previous-page' || i.customId === 'next-page') {
                                currentPage = i.customId === 'previous-page' 
                                    ? Math.max(0, currentPage - 1)
                                    : Math.min(Math.floor(roles.length / rolesPerPage), currentPage + 1);

                                const newOptions = roles
                                    .slice(currentPage * rolesPerPage, (currentPage + 1) * rolesPerPage)
                                    .map(role => ({
                                        label: role.name,
                                        value: role.id
                                    }));

                                roleSelectMenu.setOptions(newOptions);
                                navigationButtons.components[0].setDisabled(currentPage === 0);
                                navigationButtons.components[1].setDisabled(
                                    (currentPage + 1) * rolesPerPage >= roles.length
                                );

                                await i.update({
                                    components: [
                                        new ActionRowBuilder().addComponents(roleSelectMenu),
                                        navigationButtons
                                    ]
                                });
                            }
                        });

                        roleCollector.on('end', (_, reason) => {
                            if (reason === 'time') {
                                menuInteraction.editReply({
                                    content: "‚è±Ô∏è Temps √©coul√© pour la s√©lection du r√¥le.",
                                    components: []
                                });
                            }
                        });
                    }
                    break;

                case "suppr-rules":
                    const guildDataForDelete = loadGuildData(guildPath);
                    
                    if (!guildDataForDelete.rules_channel || !guildDataForDelete.rules) {
                        await menuInteraction.reply({
                            content: "‚ùå Il n'y a pas de r√®gles √† supprimer.",
                            ephemeral: true
                        });
                        return;
                    }

                    try {
                        const channelToDelete = interaction.guild.channels.cache.get(guildDataForDelete.rules_channel);
                        if (channelToDelete) {
                            const messages = await channelToDelete.messages.fetch({ limit: 100 });
                            for (const msg of messages.values()) {
                                if (msg.embeds.length > 0 || msg.components.length > 0) {
                                    await msg.delete().catch(console.error);
                                }
                            }
                        }

                        guildDataForDelete.rules = null;
                        saveGuildData(guildPath, guildDataForDelete);

                        await menuInteraction.reply({
                            content: "‚úÖ Les r√®gles ont √©t√© supprim√©es avec succ√®s.",
                            ephemeral: true
                        });
                        collector.stop();
                    } catch (error) {
                        console.error(error);
                        await menuInteraction.reply({
                            content: `‚ùå Une erreur est survenue lors de la suppression des r√®gles : ${error.message}`,
                            ephemeral: true
                        });
                    }
                    break;

                case "default-rules":
                    const defaultRules = {
                        title: "R√®gles du serveur Discord üëê",
                        description: `# R√®glement du Serveur
                        *Bienvenue sur notre serveur Discord ! Pour garantir un environnement s√ªr et agr√©able pour tous les membres, nous vous demandons de bien vouloir respecter scrupuleusement les r√®gles suivantes. Toute infraction pourra entra√Æner des sanctions allant de l'avertissement √† l'exclusion d√©finitive, en fonction de la gravit√© des faits.*
                        
                        ## 1. Respect et courtoisie ‚ù§Ô∏è
                        > **Le respect est obligatoire.** *Traitez tous les membres avec courtoisie et bienveillance. Les insultes, attaques personnelles, discriminations, harc√®lement ou comportements haineux ne seront pas tol√©r√©s.*
                        > *Aucun commentaire raciste, sexiste, homophobe, transphobe, ou discriminatoire ne sera accept√©.*
                        
                        ## 2. Comportement toxique ‚ò£Ô∏è
                        > **Le comportement toxique** *(provocations, mise en cause de membres, trolling, etc.) est interdit. Cela inclut √©galement le* **spamming** *(envoi r√©p√©titif de messages) et l'utilisation de* **langage excessivement vulgaire.**
                        > **Les conflits doivent √™tre r√©solus en priv√©**, *ne cr√©ez pas de drama dans les canaux publics.*
                        
                        ## 3. Contenu inappropri√© üìÇ
                        > *Ne partagez aucun contenu* **ill√©gal, choquant, explicitement sexuel ou violent.** *Les images et vid√©os √† caract√®re explicite ou inappropri√© seront imm√©diatement supprim√©es.*
                        > *Le* **NSFW** *(Not Safe For Work) est* **strictement interdit** *sauf dans les zones sp√©cifiquement d√©di√©es, et sous certaines conditions clairement √©tablies.*
                        
                        ## 4. Publicit√© et spam üí¨
                        > **La publicit√© non autoris√©e est interdite.** *Cela inclut l'envoi de liens vers des sites externes, des serveurs Discord ou des produits sans autorisation pr√©alable.*
                        > **Le spam de messages** *(y compris les emojis ou caract√®res r√©p√©t√©s) est interdit.*
                        
                        ## 5. Respect des canaux üíª
                        > *Utilisez les* **canaux appropri√©s** *pour chaque sujet. Ne m√©langez pas les discussions (exemple : ne parlez pas de musique dans un canal d√©di√© aux jeux vid√©o).*
                        > **Ne postez pas de contenu hors sujet** *dans des canaux sp√©cifiques (exemple : pas de discussions de politique dans un canal g√©n√©ral).*
                        
                        ## 6. Respect de la vie priv√©e üëÄ
                        > **Ne partagez pas d'informations personnelles** *(vos propres informations ou celles des autres) sans consentement explicite. Cela inclut les adresses, num√©ros de t√©l√©phone, ou toute autre donn√©e priv√©e.*
                        > **Les photos d'autres membres**, *sans leur consentement, sont interdites. Si vous postez des photos, elles doivent √™tre appropri√©es et respecter les autres membres.*
                        
                        ## 7. Comportement vis-√†-vis des mod√©rateurs üìè
                        > *Les* **mod√©rateurs** *sont l√† pour assurer le bon fonctionnement du serveur. Respectez leurs d√©cisions, ils sont habilit√©s √† appliquer les r√®gles. En cas de d√©saccord, contactez un mod√©rateur ou admin en priv√©.*
                        > *Les* **abusions** *envers les mod√©rateurs ou administrateurs (insultes, menaces, harc√®lement, ping, MP abusif) entra√Æneront des sanctions s√©v√®res.*
                        
                        ## 8. Interdiction des bots ou des programmes tiers üíæ
                        > *L'utilisation de* **bots non autoris√©s** *ou de tout programme qui enfreint les r√®gles du serveur (cheat, hack, bots automatis√©s) est formellement interdite.*
                        
                        ## 9. Sanctions ‚õî
                        > *Toute violation des r√®gles entra√Ænera une sanction qui peut varier selon la gravit√© de l'infraction. Les sanctions peuvent aller de* **l'avertissement, √† un mute temporaire, √† un ban temporaire ou √† un ban permanent.**`
                    };

                    const guildDataForDefault = loadGuildData(guildPath);
                    guildDataForDefault.rules = defaultRules;
                    saveGuildData(guildPath, guildDataForDefault);

                    const defaultEmbed = new EmbedBuilder()
                        .setTitle(defaultRules.title)
                        .setDescription(defaultRules.description)
                        .setColor(guildDataForDefault.botColor || '#f40076');

                    if (guildDataForDefault.rules_channel) {
                        const channelForDefault = interaction.guild.channels.cache.get(guildDataForDefault.rules_channel);
                        if (channelForDefault) {
                            await channelForDefault.send({ embeds: [defaultEmbed] });
                            await menuInteraction.reply({
                                content: "‚úÖ Le r√®glement par d√©faut a √©t√© g√©n√©r√© et envoy√© dans le salon configur√©.",
                                ephemeral: true
                            });
                        }
                    } else {
                        await menuInteraction.reply({
                            content: "‚ö†Ô∏è Aucun salon n'est configur√© pour le r√®glement. Le r√®glement par d√©faut a √©t√© sauvegard√© mais n'a pas pu √™tre affich√©.",
                            ephemeral: true
                        });
                    }
                    collector.stop();
                    break;

                case "end-config":
                    collector.stop();
                    break;
            }
        });

        collector.on('end', async () => {
            try {
                if (interaction.replied || interaction.deferred) {
                    await interaction.deleteReply().catch(err => {
                        console.error("Erreur lors de la suppression du message d'interaction : ", err);
                    });
                }
            } catch (error) {
                console.error("Erreur dans le collecteur 'end' : ", error);
            }
        });

        // Nettoyage du gestionnaire d'√©v√©nements lors de la fin du collector
        collector.on('end', () => {
            client.removeListener('interactionCreate', handleRulesModal);
        });
    }
};