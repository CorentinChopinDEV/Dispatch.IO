const { 
    ActionRowBuilder, 
    StringSelectMenuBuilder, 
    EmbedBuilder, 
    ModalBuilder, 
    TextInputBuilder, 
    TextInputStyle, 
    ButtonBuilder, 
    ButtonStyle 
} = require('discord.js');
const fs = require('fs');
const path = require('path');

const loadGuildData = (guildPath) => {
    try {
        if (fs.existsSync(guildPath)) {
            return JSON.parse(fs.readFileSync(guildPath, 'utf8'));
        }
    } catch (error) {
        console.error(`Erreur lors du chargement des donn√©es : ${error.message}`);
    }
    return {};
};

const saveGuildData = (guildPath, newData) => {
    try {
        const currentData = loadGuildData(guildPath);
        const mergedData = { ...currentData, ...newData };
        fs.writeFileSync(guildPath, JSON.stringify(mergedData, null, 2));
    } catch (error) {
        console.error(`Erreur lors de la sauvegarde des donn√©es : ${error.message}`);
    }
};
module.exports = {
    data: {
        name: 'config-r√®glement',
        description: 'Configurer le r√®glement sur le serveur.',
    },
    async execute(interaction) {
        const client = this.client;
        const guildId = interaction.guild.id;
        const guildPath = path.resolve(`./guilds-data/${guildId}.json`);
        const guildData = loadGuildData(guildPath);

        // V√©rification de l'existence de rules.channel
        const rulesChannel = guildData.rules_channel || null;
        const reactRole = guildData.rules?.reactRole || null;
        const rulesExist = guildData.rules && guildData.rules.title;

        // Embed initial
        const embedConfigurationRules = new EmbedBuilder()
            .setTitle("‚öôÔ∏è Configuration du R√®glement")
            .setColor(rulesChannel ? "#f40076" : "#FF0000")
            .setDescription(
                `**Configurez le r√®glement de votre serveur !**\n\n` +
                `*Modifier le r√®glement pour l'adapter √† votre serveur. üìù*\n` +
                `*Bouton r√®glement facultatif qui permet de donner un r√¥le d√©fini √† l'utilisateur.*\n\n` +
                `\`\`Etape 1: ${rulesExist ? "Modifier votre r√®glement" : "Cr√©er votre r√®glement"}\`\`\n` +
                `\`\`Etape 2: Ajouter votre bouton de validation (Facultatif)\`\``
            )  
            .addFields(
                { 
                    name: "R√¥le de R√©action", 
                    value: reactRole ? `üü¢ <@&${reactRole}>` : "üî¥ D√©sactiv√©/Non configur√©", 
                    inline: true 
                },
                { 
                    name: "Statut du salon r√®glement", 
                    value: rulesChannel ? "üü¢ Salon R√®glement trouv√© !" : "üî¥ Salon R√®glement non trouv√© !", 
                    inline: true 
                }
            )
            .setFooter({ text: "Modifiez la configuration via le menu ci-dessous." })
            .setTimestamp();

        if (!rulesChannel) {
            embedConfigurationRules.addFields({
                name: "Erreur",
                value: "Veuillez configurer un salon pour le r√®glement avant de continuer. -> ``/config``"
            });
        }
        // Menu d√©roulant
        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('rules-menu')
            .setPlaceholder('Choisissez une action')
            .addOptions([
                {
                    label: rulesExist ? "Modifier le r√®glement" : "Etape 1: Cr√©er le r√®glement",
                    value: "edit-rules",
                    description: "Configurer le contenu du r√®glement",
                    emoji: "‚úçÔ∏è"
                },
                rulesExist ? {
                    label: "Supprimer le r√®glement",
                    value: "suppr-rules",
                    description: "Supprimer le r√®glement",
                    emoji: "üóëÔ∏è"
                } : null,
                rulesExist ? null : {
                    label: "R√®glement par d√©fault",
                    value: "default-rules",
                    description: "G√©n√®rer un r√®glement par d√©fault",
                    emoji: "üíæ"
                },
                {
                    label: "Etape 2: Activer/D√©sactiver le r√¥le de validation",
                    value: "toggle-react-role",
                    description: "G√©rer le r√¥le de validation du r√®glement",
                    emoji: "‚úÖ"
                },
                {
                    label: "Mettre fin √† la configuration",
                    value: "end-config",
                    description: "Mettre fin √† la configuration du r√®glement",
                    emoji: "0Ô∏è‚É£"
                },
            ].filter(option => option !== null));

        const actionRow = new ActionRowBuilder().addComponents(selectMenu);

        // R√©ponse initiale
        await interaction.reply({
            embeds: [embedConfigurationRules],
            components: rulesChannel ? [actionRow] : []
        });

        // Gestion des interactions
        const filter = (i) => i.user.id === interaction.user.id;
        const collector = interaction.channel.createMessageComponentCollector({ filter: i => i.user.id === interaction.user.id, time: 1800000 });

        collector.on('collect', async (menuInteraction) => {
            const guildData = loadGuildData(guildPath);
            if (menuInteraction.customId === 'rules-menu') {
                const value = menuInteraction.values[0];

                if (value === "toggle-react-role") {
                    // Recharger les donn√©es du fichier JSON √† chaque interaction
                    const guildPath = `./guilds-data/${interaction.guild.id}.json`;
                    const guildData = JSON.parse(fs.readFileSync(guildPath, 'utf-8'));
                
                    const rulesChannelId = guildData.rules_channel;
                
                    if (!rulesChannelId) {
                        return menuInteraction.reply({
                            content: "Aucun salon de r√®glement n'est configur√©. Veuillez en configurer un avant de continuer.",
                            ephemeral: true
                        });
                    }
                
                    const rulesChannel = interaction.guild.channels.cache.get(rulesChannelId);
                
                    if (!rulesChannel) {
                        return menuInteraction.reply({
                            content: "Le salon configur√© pour le r√®glement est introuvable. Veuillez v√©rifier la configuration.",
                            ephemeral: true
                        });
                    }
                    
                    if (guildData.rules && guildData.rules.reactRole) {
                        const guildData2 = loadGuildData(guildPath);
                        delete guildData2.rules.reactRole;
                        fs.writeFileSync(guildPath, JSON.stringify(guildData2, null, 4));
                
                        // Supprimer les messages contenant le bouton dans le salon des r√®gles
                        const messages = await rulesChannel.messages.fetch({ limit: 100 });
                        const buttonMessage = messages.find(msg => msg.components.length > 0);
                        if (buttonMessage) {
                            await buttonMessage.delete().catch(() => {});
                        }
                        const guildData = JSON.parse(fs.readFileSync(guildPath, 'utf-8'));
                        const reactRole = guildData.rules && guildData.rules.reactRole ? guildData.rules.reactRole : null;
                        embedConfigurationRules.setFields(
                            { 
                                name: "üìã R√¥le de R√©action", 
                                value: reactRole ? `üü¢ <@&${reactRole}>` : "üî¥ D√©sactiv√©/Non configur√©", 
                                inline: true 
                            },
                            { 
                                name: "üìå Statut du salon r√®glement", 
                                value: rulesChannel ? "üü¢ Salon R√®glement trouv√© !" : "üî¥ Salon R√®glement non trouv√© !", 
                                inline: true 
                            }
                        )
                
                        await interaction.editReply({
                            embeds: [embedConfigurationRules],
                            components: [actionRow]
                        });
                
                        return menuInteraction.reply({
                            content: "Le r√¥le de validation a √©t√© d√©sactiv√©, et le bouton a √©t√© supprim√©.",
                            ephemeral: true
                        });
                    } else {
                        const allRoles = Array.from(
                            interaction.guild.roles.cache
                                .filter(role => role.name !== "@everyone")
                                .values()
                        );
                        
                        const rolesPerPage = 15;
                        let currentPage = 0;
                        
                        // Fonction pour obtenir les r√¥les pour une page sp√©cifique
                        const getPaginatedRoles = (page) => {
                            const start = page * rolesPerPage;
                            const end = start + rolesPerPage;
                            return allRoles.slice(start, end).map(role => ({
                                label: role.name,
                                value: role.id,
                            }));
                        };
                        
                        // Cr√©ation des options de menu pour la premi√®re page
                        const roleOptions = getPaginatedRoles(currentPage);
                        
                        const roleSelectMenu = new StringSelectMenuBuilder()
                            .setCustomId('select-react-role')
                            .setPlaceholder('Choisissez un r√¥le...')
                            .addOptions(roleOptions);
                        
                        const actionRowRoleReact = new ActionRowBuilder().addComponents(roleSelectMenu);
                        
                        // Cr√©ation des boutons de pagination
                        const navigationButtons = new ActionRowBuilder().addComponents(
                            new ButtonBuilder()
                                .setCustomId('previous-page')
                                .setLabel('Pr√©c√©dent')
                                .setStyle(ButtonStyle.Primary)
                                .setDisabled(currentPage === 0),
                            new ButtonBuilder()
                                .setCustomId('next-page')
                                .setLabel('Suivant')
                                .setStyle(ButtonStyle.Primary)
                                .setDisabled(allRoles.length <= rolesPerPage)
                        );
                        
                        // Envoi du message initial avec le menu et les boutons
                        await menuInteraction.reply({
                            content: "Veuillez s√©lectionner le r√¥le √† utiliser pour la validation du r√®glement.",
                            components: [actionRowRoleReact, navigationButtons],
                            ephemeral: true,
                        });
                        
                        // Cr√©ation d'un collecteur pour les interactions
                        const roleCollector = menuInteraction.channel.createMessageComponentCollector({
                            filter: i =>
                                ['select-react-role', 'previous-page', 'next-page'].includes(i.customId) &&
                                i.user.id === interaction.user.id,
                            time: 60000,
                        });
                        roleCollector.on('collect', async (i) => {
                            if (i.customId === 'select-react-role') {
                                const guildDataUpdated = JSON.parse(fs.readFileSync(guildPath, 'utf-8'));
                                const selectedRoleId = i.values[0];

                                // Assure-toi que l'objet `rules` existe
                                if (!guildDataUpdated.rules) {
                                    guildDataUpdated.rules = {};
                                }

                                // Configure le r√¥le de validation
                                guildDataUpdated.rules.reactRole = selectedRoleId;

                                // Sauvegarde des donn√©es dans le fichier JSON
                                fs.writeFileSync(guildPath, JSON.stringify(guildDataUpdated, null, 4));

                                await i.update({
                                    content: `‚úÖ Le r√¥le <@&${selectedRoleId}> a √©t√© configur√© pour la validation.`,
                                    components: []
                                });

                    
                                // Ajouter le bouton dans le salon des r√®gles
                                const button = new ButtonBuilder()
                                    .setCustomId('accept-rules')
                                    .setLabel('Valider le r√®glement')
                                    .setStyle(ButtonStyle.Success);
                    
                                const actionRowRules = new ActionRowBuilder().addComponents(button);
                    
                                await rulesChannel.send({
                                    components: [actionRowRules]
                                });
                                const guildData = JSON.parse(fs.readFileSync(guildPath, 'utf-8'));
                                const reactRole = guildData.rules && guildData.rules.reactRole ? guildData.rules.reactRole : null;
                                embedConfigurationRules.setFields(
                                    { 
                                        name: "üìã R√¥le de R√©action", 
                                        value: reactRole ? `üü¢ <@&${reactRole}>` : "üî¥ D√©sactiv√©/Non configur√©", 
                                        inline: true 
                                    },
                                    { 
                                        name: "üìå Statut du salon r√®glement", 
                                        value: rulesChannel ? "üü¢ Salon R√®glement trouv√© !" : "üî¥ Salon R√®glement non trouv√© !", 
                                        inline: true 
                                    }
                                )
                    
                                await interaction.editReply({
                                    embeds: [embedConfigurationRules],
                                    components: [actionRow]
                                });
                    
                                menuInteraction.followUp({
                                    content: `Le bouton "Valider le r√®glement" a √©t√© ajout√© dans <#${rulesChannelId}>.`,
                                    ephemeral: true
                                });
                                collector.stop(); // Arr√™te le collecteur apr√®s la s√©lection
                            } else if (i.customId === 'previous-page') {
                                // Page pr√©c√©dente
                                currentPage = Math.max(0, currentPage - 1);
                            } else if (i.customId === 'next-page') {
                                // Page suivante
                                currentPage = Math.min(
                                    Math.ceil(allRoles.length / rolesPerPage) - 1,
                                    currentPage + 1
                                );
                            }
                        
                            // Mise √† jour des options du menu d√©roulant
                            const updatedOptions = getPaginatedRoles(currentPage);
                            roleSelectMenu.setOptions(updatedOptions);
                        
                            // Mise √† jour des boutons
                            navigationButtons.components[0].setDisabled(currentPage === 0);
                            navigationButtons.components[1].setDisabled(currentPage === Math.ceil(allRoles.length / rolesPerPage) - 1);
                        
                            // Met √† jour le message avec les nouvelles options
                            await i.update({
                                components: [new ActionRowBuilder().addComponents(roleSelectMenu), navigationButtons],
                            });
                        });
                
                        roleCollector.on('end', (_, reason) => {
                            if (reason === 'time') {
                                menuInteraction.editReply({
                                    content: "Temps √©coul√© pour s√©lectionner un r√¥le.",
                                    components: []
                                });
                            }
                        });
                    }
                } else if (value === "edit-rules") {
                    const guildId = interaction.guild.id;
                    const guildDataPath = `./guilds-data/${guildId}.json`;
                    const guildData = loadGuildData(guildDataPath);
                    if(!guildData.rules) {
                        guildData.rules = {
                            title: "Titre par d√©faut",
                            description: "Une description par d√©faut."
                        };
                    }
                
                    const modal = new ModalBuilder()
                        .setCustomId('edit-rules-modal')
                        .setTitle("Configurer les r√®gles");
                
                    const titleInput = new TextInputBuilder()
                        .setCustomId('rules-title')
                        .setLabel("Titre des r√®gles")
                        .setStyle(TextInputStyle.Short)
                        .setValue(guildData.rules.title);
                
                    const descriptionInput = new TextInputBuilder()
                        .setCustomId('rules-description')
                        .setLabel("Description des r√®gles")
                        .setStyle(TextInputStyle.Paragraph)
                        .setValue(guildData.rules.description);
                
                    const row1 = new ActionRowBuilder().addComponents(titleInput);
                    const row2 = new ActionRowBuilder().addComponents(descriptionInput);
                
                    modal.addComponents(row1, row2);
                
                    await menuInteraction.showModal(modal);
                } else if (value === "suppr-rules") {
                    const guildData = loadGuildData(guildPath);
                
                    if (!guildData.rules_channel || !guildData.rules) {
                        if (!interaction.replied && !interaction.deferred) {
                            return interaction.reply("Il n'y a pas de r√®gles √† supprimer.");
                        }
                        return;
                    }
                    try {
                        const rulesChannel = interaction.guild.channels.cache.get(guildData.rules_channel);
                        if (rulesChannel) {
                            const messages = await rulesChannel.messages.fetch({ limit: 100 });
                        
                            for (const msg of messages.values()) {
                                if (msg.embeds.length > 0 && msg.embeds[0].title === guildData.rules.title) {
                                    await msg.delete();
                                    console.log("Embed des r√®gles supprim√©.");
                                }
                                if (msg.components.length > 0) {
                                    await msg.delete();
                                }
                            }
                        
                            // V√©rifier si les r√®gles existent avant de les supprimer
                            if (guildData.rules) {
                                guildData.rules = null; // Remplacer par null au lieu de supprimer
                                saveGuildData(guildPath, guildData);
                                console.log("Les r√®gles ont √©t√© supprim√©es du fichier guildData.");
                            } else {
                                console.log("Aucune r√®gle √† supprimer dans guildData.");
                            }
                        
                            // Sauvegarder les donn√©es mises √† jour dans le fichier JSON
                        
                            // R√©pondre √† l'utilisateur pour confirmer la suppression
                            if (!interaction.replied && !interaction.deferred) {
                                interaction.reply("Les r√®gles ont bien √©t√© supprim√©es.");
                            }
                            collector.stop();
                        } else {
                            console.log("Le salon des r√®gles est introuvable.");
                        }                        
                    } catch (err) {
                        console.error(err);
                
                        if (!interaction.replied && !interaction.deferred) {
                            interaction.reply(`Impossible de supprimer les r√®gles : ${err.message}`);
                        }
                    }
                } else if (value === "default-rules") {
                    const guildId = interaction.guild.id;
                    let descriptionDefault = ` # R√®glement du Serveur
                *Bienvenue sur notre serveur Discord ! Pour garantir un environnement s√ªr et agr√©able pour tous les membres, nous vous demandons de bien vouloir respecter scrupuleusement les r√®gles suivantes. Toute infraction pourra entra√Æner des sanctions allant de l'avertissement √† l'exclusion d√©finitive, en fonction de la gravit√© des faits.*
                
                ## 1. Respect et courtoisie ‚ù§Ô∏è
                > **Le respect est obligatoire.** *Traitez tous les membres avec courtoisie et bienveillance. Les insultes, attaques personnelles, discriminations, harc√®lement ou comportements haineux ne seront pas tol√©r√©s.*
                > *Aucun commentaire raciste, sexiste, homophobe, transphobe, ou discriminatoire ne sera accept√©.*
                
                ## 2. Comportement toxique ‚ò£Ô∏è
                > **Le comportement toxique** *(provocations, mise en cause de membres, trolling, etc.) est interdit. Cela inclut √©galement le* **spamming** *(envoi r√©p√©titif de messages) et l‚Äôutilisation de* **langage excessivement vulgaire.**
                > **Les conflits doivent √™tre r√©solus en priv√©**, *ne cr√©ez pas de drama dans les canaux publics.*
                
                ## 3. Contenu inappropri√© üìÇ
                > *Ne partagez aucun contenu* **ill√©gal, choquant, explicitement sexuel ou violent.** *Les images et vid√©os √† caract√®re explicite ou inappropri√© seront imm√©diatement supprim√©es.*
                > *Le* **NSFW** *(Not Safe For Work) est* **strictement interdit** *sauf dans les zones sp√©cifiquement d√©di√©es, et sous certaines conditions clairement √©tablies.*
                
                ## 4. Publicit√© et spam üí¨
                > **La publicit√© non autoris√©e est interdite.** *Cela inclut l‚Äôenvoi de liens vers des sites externes, des serveurs Discord ou des produits sans autorisation pr√©alable.*
                > **Le spam de messages** *(y compris les emojis ou caract√®res r√©p√©t√©s) est interdit.*
                
                ## 5. Respect des canaux üíª
                > *Utilisez les* **canaux appropri√©s** *pour chaque sujet. Ne m√©langez pas les discussions (exemple : ne parlez pas de musique dans un canal d√©di√© aux jeux vid√©o).*
                > **Ne postez pas de contenu hors sujet** *dans des canaux sp√©cifiques (exemple : pas de discussions de politique dans un canal g√©n√©ral).*
                
                ## 6. Respect de la vie priv√©e üëÄ
                > **Ne partagez pas d'informations personnelles** *(vos propres informations ou celles des autres) sans consentement explicite. Cela inclut les adresses, num√©ros de t√©l√©phone, ou toute autre donn√©e priv√©e.*
                > **Les photos d‚Äôautres membres**, *sans leur consentement, sont interdites. Si vous postez des photos, elles doivent √™tre appropri√©es et respecter les autres membres.*
                
                ## 7. Comportement vis-√†-vis des mod√©rateurs üìè
                > *Les* **mod√©rateurs** *sont l√† pour assurer le bon fonctionnement du serveur. Respectez leurs d√©cisions, ils sont habilit√©s √† appliquer les r√®gles. En cas de d√©saccord, contactez un mod√©rateur ou admin en priv√©.*
                > *Les* **abusions** *envers les mod√©rateurs ou administrateurs (insultes, menaces, harc√®lement, ping, MP abusif) entra√Æneront des sanctions s√©v√®res.*
                
                ## 8. Interdiction des bots ou des programmes tiers üíæ
                > *L‚Äôutilisation de* **bots non autoris√©s** *ou de tout programme qui enfreint les r√®gles du serveur (cheat, hack, bots automatis√©s) est formellement interdite.*
                
                ## 9. Sanctions ‚õî
                > *Toute violation des r√®gles entra√Ænera une sanction qui peut varier selon la gravit√© de l'infraction. Les sanctions peuvent aller de* **l‚Äôavertissement, √† un mute temporaire, √† un ban temporaire ou √† un ban permanent.**`;
                    const guildDataPath = `./guilds-data/${guildId}.json`;
                    const guildData = loadGuildData(guildDataPath);
                    const rulesEmbed = new EmbedBuilder()
                        .setTitle("R√®gles du serveur Discord üëê")
                        .setDescription(descriptionDefault)
                        .setColor(guildData.botColor || '#f40076');
                    if (!guildData.rules) {
                        guildData.rules = {
                            title: '',
                            description: ''
                        };
                    }
                    guildData.rules = {
                        title: "R√®gles du serveur Discord üëê",
                        description: descriptionDefault,
                    };
                
                    // Sauvegarder les donn√©es dans le fichier JSON
                    saveGuildData(guildDataPath, guildData);
                    // R√©pondre avec l'embed dans le salon
                    if (guildData.rules_channel) {
                        const rulesChannelId = guildData.rules_channel;
                        const rulesChannel = interaction.guild.channels.cache.get(rulesChannelId);
                    
                        if (rulesChannel) {
                            rulesChannel.send({ embeds: [rulesEmbed] });
                        } else {
                            interaction.channel.send("Le salon des r√®gles n'a pas √©t√© trouv√©. L'embed sera envoy√© ici.");
                            interaction.channel.send({ embeds: [rulesEmbed] });
                        }
                    } else {
                        interaction.channel.send({ embeds: [rulesEmbed] });
                    }                    
                    collector.stop();
                } else if (value === "end-config") {
                    collector.stop()
                }              
                client.on('interactionCreate', async interaction => {
                    if (interaction.customId === 'edit-rules-modal') {
                        const title = interaction.fields.getTextInputValue('rules-title');
                        const description = interaction.fields.getTextInputValue('rules-description');
                        const guildId = interaction.guild.id;
                        const guildDataPath = `./guilds-data/${guildId}.json`;
                        
                        // Chargement des donn√©es existantes de la guild
                        const guildData = loadGuildData(guildDataPath);
                
                        // Initialisation des r√®gles si elles n'existent pas
                        if (!guildData.rules) {
                            guildData.rules = {
                                title: '',
                                description: ''
                            };
                        }
                
                        // Mise √† jour des champs existants ou ajout des nouveaux champs
                        if (title) guildData.rules.title = title;
                        if (description) guildData.rules.description = description;
                        // Sauvegarde des donn√©es mises √† jour
                        saveGuildData(guildDataPath, guildData);
                
                        // Envoi des r√®gles dans le salon configur√©
                        const channel = interaction.guild.channels.cache.get(guildData.rules_channel);
                
                        if (channel) {
                            const messages = await channel.messages.fetch({ limit: 100 });
                            for (const message of messages.values()) {
                                if (message.embeds.length > 0 || message.components.length > 0) {
                                    await message.delete();
                                }
                                if (msg.components.length > 0) {
                                    await msg.delete();
                                }
                            }
                            const embed = new EmbedBuilder()
                                .setTitle(guildData.rules.title)
                                .setDescription(guildData.rules.description)
                                .setColor(guildData.botColor || '#f40076')
                            await channel.send({ embeds: [embed] });
                        }
                
                        // R√©ponse √† l'interaction
                        await interaction.reply({
                            content: "**Les r√®gles ont √©t√© mises √† jour avec succ√®s !**",
                            ephemeral: true
                        });
                        collector.stop();
                    }
                });      
            }
        });

        collector.on('end', async () => {
            try {
                // Suppression s√©curis√©e du message d'interaction si possible
                if (interaction.replied || interaction.deferred) {
                    try {
                        await interaction.deleteReply();
                    } catch (err) {
                        console.error("Erreur lors de la suppression du message d'interaction : ", err);
                    }
                }
            } catch (e) {
                console.error("Erreur dans le collecteur 'end' : ", e);
            }
        });        
    }
};
